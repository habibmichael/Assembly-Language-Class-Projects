.equ SWI_Open, 0x66 
.equ SWI_Close,0x68
.equ SWI_PrChr,0x00
.equ SWI_PrStr, 0x69 
.equ SWI_PrInt,0x6b 
.equ SWI_RdInt,0x6c 
.equ Stdout, 1 
.equ SWI_Exit, 0x11 
.global _start
.text
_start: 
ldr r0,=InFileName
mov r1,#0 
swi SWI_Open 
bcs InFileError
ldr r1,=InFileHandle 
str r0,[r1]
mov r2,#0
RLoop:
ldr r0,=InFileHandle 
ldr r0,[r0]
swi SWI_RdInt 
bcs EofReached 
ldr r1,=IntHolder
str r0,[r1,r2]
add r2,r2,#4 @r2-size
bal RLoop 
EofReached:
ldr r0,=InFileHandle 
ldr r0,[r0]
swi SWI_Close
ldr r1,=IntHolder
mov r0,#0@r0-index
mov r3,#0 @r3- smallest index
mov r4,#0 @r4- test index
Loop:
mov r3,r0
cmp r0,r2
beq End
mov r4,r3
Smallest:
mov r3,r4
ldrb r5,[r1,r3]
SmallestLoop:
add r4,r4,#4
cmp r2,r4
beq SwapTime
ldrb r6,[r1,r4]
cmp r5,r6 
bge Smallest
bal SmallestLoop
SwapTime:
ldrb r7,[r1,r3]@smallest
ldrb r8,[r1,r0]@Index to swap with
strb r7,[r1,r0]
strb r8,[r1,r3]
add r0,r0,#4
bal Loop
End:
ldr r0,=OutFileName
mov r1,#1
swi SWI_Open
bcs OutFileError
ldr r5,=OutFileHandle
str r0,[r5]
ldr r3,=IntHolder
mov r4,r2@size
mov r2,#0@index
ldr r0,=OutFileHandle
ldr r0,[r0]
ldrb r1,[r3,r2]
swi SWI_PrInt
ldr r1,=NL
swi SWI_PrStr
OutputLoop:
add r2,r2,#4
cmp r2,r4
beq ExitLoop
ldr r0,=OutFileHandle
ldr r0,[r0]
ldrb r1,[r3,r2]
swi SWI_PrInt
ldr r1,=NL
swi SWI_PrStr
bal OutputLoop
ExitLoop:
swi SWI_Close
Exit:
swi SWI_Exit
InFileError:
mov R0, #Stdout
ldr R1, =FileOpenInpErrMsg
swi SWI_PrStr 
OutFileError:
mov R0, #Stdout
ldr R1, =FileOpenOutErrMsg
swi SWI_PrStr 
bal Exit 
.align
.data
InFileHandle: .skip 4
OutFileHandle: .skip 4
IntHolder: .skip 1024
InFileName: .asciz "in.txt"
OutFileName: .asciz "sorted.txt"
FileOpenInpErrMsg: .asciz "Failed to open input file \n"
FileOpenOutErrMsg: .asciz "Failed to open output file\n"
EndOfFileMsg: .asciz "End of file reached\n"
ColonSpace: .asciz": "
NL: .asciz "\n " @ new line 
.end