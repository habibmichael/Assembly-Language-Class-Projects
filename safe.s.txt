.equ SWI_SETSEG8, 0x200 @display on 8 Segment
.equ SWI_SETLED, 0x201 @LEDs on/off
.equ SWI_CheckBlack, 0x202 @check Black button
.equ SWI_CheckBlue, 0x203 @check press Blue button
.equ SWI_DRAW_STRING, 0x204 @display a string on LCD
.equ SWI_DRAW_INT, 0x205 @display an int on LCD
.equ SWI_CLEAR_DISPLAY,0x206 @clear LCD
.equ SWI_DRAW_CHAR, 0x207 @display a char on LCD
.equ SWI_CLEAR_LINE, 0x208 @clear a line on LCD
.equ SWI_EXIT, 0x11 @terminate program
.equ SWI_GetTicks, 0x6d @get current time 
.equ SEG_A, 0x80 @ patterns for 8 segment display
.equ SEG_B, 0x40 @byte values for each segment
.equ SEG_C, 0x20 @of the 8 segment display
.equ SEG_D, 0x08
.equ SEG_E, 0x04
.equ SEG_F, 0x02
.equ SEG_G, 0x01
.equ SEG_P, 0x10
.equ LEFT_LED, 0x02 @bit patterns for LED lights
.equ RIGHT_LED, 0x01
.equ LEFT_BLACK_BUTTON,0x02 @bit patterns for black buttons
.equ RIGHT_BLACK_BUTTON,0x01 @and for blue buttons
.equ BLUE_KEY_00, 0x01 @button(0)
.equ BLUE_KEY_01, 0x02 @button(1)
.equ BLUE_KEY_02, 0x04 @button(2)
.equ BLUE_KEY_03, 0x08 @button(3)
.equ BLUE_KEY_04, 0x10 @button(4)
.equ BLUE_KEY_05, 0x20 @button(5)
.equ BLUE_KEY_06, 0x40 @button(6)
.equ BLUE_KEY_07, 0x80 @button(7)
.equ BLUE_KEY_08, 1<<8 @button(8) - different way to set
.equ BLUE_KEY_09, 1<<9 @button(9)
.equ BLUE_KEY_10, 1<<10 @button(10)
.equ BLUE_KEY_11, 1<<11 @button(11)
.equ BLUE_KEY_12, 1<<12 @button(12)
.equ BLUE_KEY_13, 1<<13 @button(13)
.equ BLUE_KEY_14, 1<<14 @button(14)
.equ BLUE_KEY_15, 1<<15 @button(15)
@WASNT SURE HOW YOU WANTED TO START IT OFF SO I HAVE AN INITIAL
@LOOP THAT WAITS FOR A CODE TO BE ENTERED. THE RIGHT BLACK CANT BE PRESSED
@ONLY THE LEFT ONCE THE CODE IS PUT IN, AFTER THIS INITIAL LOOP ALL OTHER 
@PARTS OF THE PROJECT WORK , LIKE ADDING CODES AND FORGETTING THEM
@ALSO TO GO FROM A STATE "A" TO "P" YOU MUST LOCK FIRST
ldr r0,=SEG_B|SEG_C|SEG_D|SEG_E|SEG_G
swi SWI_SETSEG8
mov r3,#0 @ 0 for unlocked 1 for locked,2 for programming ,3 for confirming
mov r4,#0@ counts number of digits in a code
mov r1,#0@size of previous code
mov r6,sp
mov r7,r6
InitialLoop:
swi SWI_CheckBlack @get button press into R0
cmp r0,#0x02
beq LeftBlack
swi SWI_CheckBlue @get button press into R0
cmp r0,#0 
bne InitialAdd
bal InitialLoop
mov r3,#0 @ 0 for unlocked 1 for locked,2 for programming ,3 for confirming
mov r4,#0@ counts number of digits in a code
Loop:
swi SWI_CheckBlack @get button press into R0
cmp r0,#0x01
beq RightBlack
cmp r0,#0x02
beq LeftBlack
swi SWI_CheckBlue @get button press into R0
cmp r0,#0 
bne AddBlue                                                                                      
bal Loop
AddBlue:
cmp r3,#2
moveq r3,#3
InitialAdd:
cmp r0,#BLUE_KEY_15
beq FIFTEEN
cmp r0,#BLUE_KEY_14
beq FOURTEEN
cmp r0,#BLUE_KEY_13
beq THIRTEEN
cmp r0,#BLUE_KEY_12
beq TWELVE
cmp r0,#BLUE_KEY_11
beq ELEVEN
cmp r0,#BLUE_KEY_10
beq TEN
cmp r0,#BLUE_KEY_09
beq NINE
cmp r0,#BLUE_KEY_08
beq EIGHT
cmp r0,#BLUE_KEY_07
beq SEVEN
cmp r0,#BLUE_KEY_06
beq SIX
cmp r0,#BLUE_KEY_05
beq FIVE
cmp r0,#BLUE_KEY_04
beq FOUR
cmp r0,#BLUE_KEY_03
beq THREE
cmp r0,#BLUE_KEY_02
beq TWO
cmp r0,#BLUE_KEY_01
beq ONE
cmp r0,#BLUE_KEY_00
stmeqea r6!,{r0}
addeq r4,r4,#1
addeq r7,r7,#4
cmp r3,#6
beq Forget
cmp r3,#3
bge nextstate
bal Loop
LeftBlack:
cmp r3,#0
beq LittleCheck
NVM:
ldreq r0,=SEG_D|SEG_E|SEG_G
swieq SWI_SETSEG8
stmeqea r6!,{r8}
moveq r4,#0
moveq r3,#1
beq Loop
cmp r3,#1
ldrgt r0,=SEG_D|SEG_E|SEG_G
swigt SWI_SETSEG8
movgt r0,#4
mulgt r2,r0,r4
subgt r7,r7,r2
movgt r6,r7
addgt r6,r6,#4
movgt r3,#1
movgt r4,#0
bgt Loop
beq Check
cmp r4,#0
beq Loop
Check:
cmp r3,#1
bleq Search
cmp r0,#0
ldreq r0,=SEG_D|SEG_E|SEG_G
swieq SWI_SETSEG8
subeq r7,r7,r3
subeq r7,r7,#4
moveq r6,r7
addeq r6,r6,#4
moveq r3,#1
cmp r0,#1
ldreq r0,=SEG_B|SEG_C|SEG_D|SEG_E|SEG_G
swieq SWI_SETSEG8
subeq r7,r7,r3
subeq r7,r7,#4
moveq r6,r7
addeq r6,r6,#4
moveq r3,#0
moveq r4,#0
beq Loop
cmp r4,#4
blt Fault
cmp r3,#0
moveq r3,#1
moveq r1,r4
moveq r4,#0
ldreq r0,=SEG_D|SEG_E|SEG_G
swieq SWI_SETSEG8
stmeqea r6!,{r8}
cmp r3,#1
ldrgt r0,=SEG_D|SEG_E|SEG_G
swigt SWI_SETSEG8
movgt r0,#4
mulgt r2,r0,r4
subgt r7,r7,r2
movgt r6,r7
addgt r6,r6,#4
movgt r3,#1
movgt r4,#0

LittleCheck:
ldr r0,[r7]
cmp r0,#0
ldreq r0,=SEG_D|SEG_E|SEG_G
swieq SWI_SETSEG8
moveq r3,#1
bne NVM
bal Loop
RightBlack:
cmp r3,#5
ldreq r0,=SEG_A|SEG_B|SEG_F|SEG_G|SEG_E
swieq SWI_SETSEG8
moveq r3,#2
cmp r3,#0
beq Loop
cmp r3,#1
moveq r3,#2
ldreq r0,=SEG_A|SEG_B|SEG_F|SEG_G|SEG_E
swieq SWI_SETSEG8
cmp r3,#2
bne nextstate
swieq SWI_CheckBlue @get button press into R0
cmp r3,#0
bne AddBlue
beq Loop
ONE:
add r4,r4,#1
add r7,r7,#4
stmea r6!,{r0}
cmp r3,#6
beq Forget
cmp r3,#3
bge nextstate
bal Loop
TWO:
add r4,r4,#1
add r7,r7,#4
stmea r6!,{r0}
cmp r3,#6
beq Forget
cmp r3,#3
bge nextstate
bal Loop
THREE:
add r4,r4,#1
add r7,r7,#4
stmea r6!,{r0}
cmp r3,#6
beq Forget
cmp r3,#3
bge nextstate
bal Loop
FOUR:
add r4,r4,#1
add r7,r7,#4
stmea r6!,{r0}
cmp r3,#6
beq Forget
cmp r3,#3
bge nextstate
bal Loop
FIVE:
add r4,r4,#1
add r7,r7,#4
stmea r6!,{r0}
cmp r3,#6
beq Forget
cmp r3,#3
bge nextstate
bal Loop
SIX:
add r4,r4,#1
add r7,r7,#4
stmea r6!,{r0}
cmp r3,#6
beq Forget
cmp r3,#3
bge nextstate
bal Loop
SEVEN:
add r4,r4,#1
add r7,r7,#4
stmea r6!,{r0}
cmp r3,#6
beq Forget
cmp r3,#3
bge nextstate
bal Loop
EIGHT:
add r4,r4,#1
add r7,r7,#4
stmea r6!,{r0}
cmp r3,#6
beq Forget
cmp r3,#3
bge nextstate
bal Loop
NINE:
add r4,r4,#1
add r7,r7,#4
stmea r6!,{r0}
cmp r3,#6
beq Forget
cmp r3,#3
bge nextstate
bal Loop
TEN:
add r4,r4,#1
add r7,r7,#4
stmea r6!,{r0}
cmp r3,#6
beq Forget
cmp r3,#3
bge nextstate
bal Loop
ELEVEN:
add r4,r4,#1
add r7,r7,#4
stmea r6!,{r0}
cmp r3,#6
beq Forget
cmp r3,#3
bge nextstate
bal Loop
TWELVE:
add r4,r4,#1
add r7,r7,#4
stmea r6!,{r0}
cmp r3,#6
beq Forget
cmp r3,#3
bge nextstate
bal Loop
THIRTEEN:
add r4,r4,#1
add r7,r7,#4
stmea r6!,{r0}
cmp r3,#6
beq Forget
cmp r3,#3
bge nextstate
bal Loop
FOURTEEN:
add r4,r4,#1
add r7,r7,#4
stmea r6!,{r0}
cmp r3,#6
beq Forget
cmp r3,#3
bge nextstate
bal Loop
FIFTEEN:
add r4,r4,#1
add r7,r7,#4
stmea r6!,{r0}
cmp r3,#6
beq Forget
cmp r3,#3
bge nextstate
bal Loop
nextstate:
CLoop:
swi SWI_CheckBlack @get button press into R0
cmp r0,#0x01
beq Confirm
cmp r0,#0x02
beq LeftBlack
swi SWI_CheckBlue @get button press into R0
cmp r0,#0 
bne AddBlue
bal CLoop
Confirm:
cmp r4,#4
blt Fault
cmp r3,#3
bne Check4
bleq Search
cmp r0,#0
ldreq r0,=SEG_A|SEG_D|SEG_E|SEG_G
swieq SWI_SETSEG8
ldrne r0,=SEG_A|SEG_F|SEG_G|SEG_E
swine SWI_SETSEG8
stmneea r6!,{r8}
addne r7,r7,#4
movne r3,#6
movne r4,#0
bne Forget
moveq r3,#4
stmeqea r6!,{r8}
moveq r4,#0
addeq r7,r7,#4
beq CLoop
Check4:
cmp r3,#4
bleq Search
cmpeq r0,#1
ldreq r0,=SEG_A|SEG_B|SEG_C|SEG_E|SEG_F|SEG_G
swieq SWI_SETSEG8
sub r7,r7,r3
sub r7,r7,#4
mov r6,r7
add r6,r6,#4
moveq r3,#4
beq Loop
Fault:
ldr r0,=SEG_A|SEG_D|SEG_E|SEG_F|SEG_G
swi SWI_SETSEG8
cmp r3,#1
moveq r3,#5
beq Loop
cmp r3,#0
beq IFault
cmp r3,#3
movgt r3,#5
mov r0,#0
FaultLoop:
cmp r0,r4
moveq r6,r7
addeq r6,r6,#4
moveq r3,#5
beq Loop
sub r7,r7,#4
add r0,r0,#1
bal FaultLoop
IFault:
mov r0,#0
IFaultLoop:
cmp r0,r4
moveq r6,r7
beq InitialLoop
sub r7,r7,#4
add r0,r0,#1
bal IFaultLoop
Search:
mov r3,r4
mov r0,#4
sub r3,r3,#1 
mov r5,r7
mul r3,r0,r3
sub r5,r5,r3 
mov r0,sp
mov r9,sp
stmfd sp!,{r1-r9,lr}
sub r7,r7,r3
SLoop:
cmp r5,r9
beq Done
mov r7,r5
mov r3,#1
ldr r2,[r5]
ldr r8,[r9]
cmp r2,r8
bne Continue
CheckNext:
cmp r3,r4
beq EndOfCode
add r0,r0,#4
add r7,r7,#4
ldr r2,[r7]
ldr r8,[r0]
add r3,r3,#1
cmp r2,r8
bne Continue
beq CheckNext
Continue:
add r0,r0,#4
ldr r2,[r0]
cmp r2,#0
addeq r0,r0,#4
moveq r9,r0
beq SLoop
blt Done
bal Continue
EndOfCode:
add r0,r0,#4
ldr r1,[r0]
cmp r1,#0
bne Continue
moveq r0,#1
movne r0,#0
ldmeqfd sp!,{r1-r9,pc}
Done:
mov r0,#0
ldmfd sp!,{r1-r9,pc}
Forget:
swi SWI_CheckBlack @get button press into R0
cmp r0,#0x01
beq CForget
cmp r0,#0x02
beq LeftBlack
swi SWI_CheckBlue @get button press into R0
cmp r0,#0 
bne AddBlue
bal Forget
CForget:
cmp r3,#6
bleq Search
cmpeq r0,#1
ldreq r0,=SEG_A|SEG_B|SEG_C|SEG_E|SEG_F|SEG_G
swieq SWI_SETSEG8
bleq ForgetCode
moveq r3,#4
bne Fault
bal Loop
ForgetCode:
add r6,r6,#4
ldr r8,[r6]
sub r6,r6,#4
stmfd sp!,{r0-r5,r8-r9,lr}
mov r0,#4
sub r1,r1,#1
mul r2,r1,r0
sub r7,r7,r2
mov r5,r7
mov r6,r2
mov r1,#1
mov r0,r9
FLoop:
cmp r5,r9
beq FDone
ldr r2,[r5]
ldr r3,[r9]
cmp r2,r3
bne FContinue
FCheckNext:
cmp r1,r4
beq FEndOfCode
add r0,r0,#4
add r7,r7,#4
ldr r2,[r7]
ldr r3,[r0]
add r1,r1,#1
cmp r2,r3
bne FContinue
beq FCheckNext
FContinue:
add r0,r0,#4
ldr r2,[r0]
cmp r2,#0
addeq r0,r0,#4
moveq r9,r0
beq FLoop
blt FDone
bal FContinue
FEndOfCode:
add r0,r0,#4
ldr r1,[r0]
cmp r1,#0
bne FContinue
beq Delete
moveq r0,#1
movne r0,#0
ldmfd sp!,{r0-r6,r8-r9,pc}
FDone:
ldmfd sp!,{r0-r5,r8-r9,pc}
Delete:
sub r0,r0,r6
sub r0,r0,#4
add r4,r4,#1
mov r1,#0
DeleteLoop:
cmp r1,r4
beq Shift
stmea r0!, {r8}
add r1, r1,#1
bal DeleteLoop
Shift:
mov r1,#4
sub r7,r7,r6
sub r7,r7,r6
sub r7,r7,#8
sub r0,r0,#4
mov r3,r0
add r3,r3,#4
sub r0,r0,r6
sub r0,r0,#4
ShiftLoop:
cmp r7,r3
beq DoneShift
ldr r2,[r3]
str r2,[r0]
add r3,r3,#4
add r0,r0,#4
add r1,r1,#4
bal ShiftLoop
DoneShift:
mov r7,r0
mov r6,r0
sub r7,r7,#4

ldmfd sp!,{r0-r5,r8,r9,pc}
Display8Segment:
stmfd sp!,{r0-r2,lr}
ldr r2,=Digits
ldr r0,[r2,r0,lsl#2]
tst r1,#0x01 @if r1=1,
orrne r0,r0,#SEG_P @then show P
swi SWI_SETSEG8
ldmfd sp!,{r0-r2,pc}


.data
Digits:
.word SEG_A|SEG_B|SEG_C|SEG_D|SEG_E|SEG_G @0
.word SEG_B|SEG_C @1
.word SEG_A|SEG_B|SEG_F|SEG_E|SEG_D @2
.word SEG_A|SEG_B|SEG_F|SEG_C|SEG_D @3
.word SEG_G|SEG_F|SEG_B|SEG_C @4
.word SEG_A|SEG_G|SEG_F|SEG_C|SEG_D @5
.word SEG_A|SEG_G|SEG_F|SEG_E|SEG_D|SEG_C @6
.word SEG_A|SEG_B|SEG_C @7
.word SEG_A|SEG_B|SEG_C|SEG_D|SEG_E|SEG_F|SEG_G @8
.word SEG_A|SEG_B|SEG_F|SEG_G|SEG_C @9
.word SEG_A|SEG_B|SEG_C|SEG_E|SEG_F|SEG_G @A
.word SEG_A|SEG_B|SEG_C|SEG_D|SEG_E|SEG_F|SEG_G @B
.word SEG_A|SEG_D|SEG_E|SEG_G @C
.word SEG_A|SEG_B|SEG_C|SEG_D|SEG_E|SEG_G @D
.word SEG_A|SEG_D|SEG_G|SEG_E|SEG_F @E
.word SEG_A|SEG_F|SEG_G|SEG_E @F
.word 0 @Blank display
.end